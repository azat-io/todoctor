name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  packages: write
  models: read

jobs:
  build-binaries:
    name: Build Binaries
    runs-on: ${{ matrix.platform }}

    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        arch:
          - x64
          - arm64
        exclude:
          - platform: windows-latest
            arch: arm64

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Install Tools
        uses: ./.github/actions/install-tools

      - name: Set up MSVC Environment
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0
        with:
          arch: ${{ matrix.arch }}

      - name: Remove Git link.exe from PATH
        if: runner.os == 'Windows'
        run: |
          echo "Original PATH: %PATH%"
          set PATH=%PATH:"C:\Program Files\Git\usr\bin";=%
          echo "Modified PATH: %PATH%"
        shell: cmd

      - name: Check for Correct link.exe
        if: runner.os == 'Windows'
        run: where link

      - name: Install Cross
        if: runner.os != 'Windows'
        run: cargo install cross --locked

      - name: Build Binaries (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Building for ${{ matrix.platform }} on architecture ${{ matrix.arch }}"
          if [[ "${{ matrix.platform }}" == "ubuntu-latest" ]]; then
            if [[ "${{ matrix.arch }}" == "x64" ]]; then
              cross build --release --target x86_64-unknown-linux-gnu
            elif [[ "${{ matrix.arch }}" == "arm64" ]]; then
              cross build --release --target aarch64-unknown-linux-gnu
            fi
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            if [[ "${{ matrix.arch }}" == "x64" ]]; then
              cross build --release --target x86_64-apple-darwin
            elif [[ "${{ matrix.arch }}" == "arm64" ]]; then
              cross build --release --target aarch64-apple-darwin
            fi
          fi
        shell: bash

      - name: Build Binaries (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Building for ${{ matrix.platform }} on architecture ${{ matrix.arch }}"
          cargo build --release --target x86_64-pc-windows-msvc
        shell: cmd

      - name: Move Binaries to Bin Folder (Unix)
        if: runner.os != 'Windows'
        run: |
          if [[ "${{ matrix.platform }}" == "ubuntu-latest" ]]; then
            if [[ "${{ matrix.arch }}" == "x64" ]]; then
              mkdir -p ./packages/linux-x64
              cp target/x86_64-unknown-linux-gnu/release/todoctor ./packages/linux-x64/todoctor
              chmod +x ./packages/linux-x64/todoctor
            elif [[ "${{ matrix.arch }}" == "arm64" ]]; then
              mkdir -p ./packages/linux-arm64
              cp target/aarch64-unknown-linux-gnu/release/todoctor ./packages/linux-arm64/todoctor
              chmod +x ./packages/linux-arm64/todoctor
            fi
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            if [[ "${{ matrix.arch }}" == "x64" ]]; then
              mkdir -p ./packages/darwin-x64
              cp target/x86_64-apple-darwin/release/todoctor ./packages/darwin-x64/todoctor
              chmod +x ./packages/darwin-x64/todoctor
            elif [[ "${{ matrix.arch }}" == "arm64" ]]; then
              mkdir -p ./packages/darwin-arm64
              cp target/aarch64-apple-darwin/release/todoctor ./packages/darwin-arm64/todoctor
              chmod +x ./packages/darwin-arm64/todoctor
            fi
          fi
        shell: bash

      - name: Move Binaries to Bin Folder (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir packages\win32-x64
          copy target\x86_64-pc-windows-msvc\release\todoctor.exe packages\win32-x64\todoctor.exe
        shell: cmd

      - name: Upload Binaries
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: todoctor-${{ matrix.platform }}-${{ matrix.arch }}
          path: '**/*'

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build-binaries

    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Install Tools
        uses: ./.github/actions/install-tools

      - name: Install Dependencies
        uses: ./.github/actions/install-dependencies

      - name: Build Static Assets
        run: pnpm run build:preview

      - name: Download Binaries for Linux x64
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: todoctor-ubuntu-latest-x64
          path: .

      - name: Download Binaries for Linux arm64
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: todoctor-ubuntu-latest-arm64
          path: .

      - name: Download Binaries for macOS x64
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: todoctor-macos-latest-x64
          path: .

      - name: Download Binaries for macOS arm64
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: todoctor-macos-latest-arm64
          path: .

      - name: Download Binaries for Windows x64
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: todoctor-windows-latest-x64
          path: .

      - name: Set Execute Permissions on Binaries
        run: |
          chmod +x ./packages/linux-x64/todoctor
          chmod +x ./packages/linux-arm64/todoctor
          chmod +x ./packages/darwin-x64/todoctor
          chmod +x ./packages/darwin-arm64/todoctor

      - name: Verify Binary Permissions
        run: |
          ls -l ./packages/linux-x64/todoctor
          ls -l ./packages/linux-arm64/todoctor
          ls -l ./packages/darwin-x64/todoctor
          ls -l ./packages/darwin-arm64/todoctor

      - name: Create GitHub Release
        run: pnpm run ci:changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure NPM Auth
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NODE_AUTH_TOKEN }}" > ~/.npmrc

      - name: Update Package Versions
        shell: bash
        run: node ./scripts/version.js

      - name: Clear Package JSON
        run: pnpm run ci:clear

      - name: Publish Root Package to NPM
        run: npm publish --access public --no-git-checks --provenance

      - name: Publish Packages to NPM
        run: |
          for pkg in packages/*; do
            if [ -d "$pkg" ]; then
              echo "Publishing package $pkg"
              cd "$pkg"
              npm publish --access public --no-git-checks --provenance
              cd -
            fi
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

      - name: Generate Social Changelog
        continue-on-error: true
        run: |
          pnpm social-changelog \
            --org azat-io \
            --repo todoctor \
            --name "Todoctor" \
            > social-post.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post to Social Media
        continue-on-error: true
        run: |
          pnpm crosspost \
            --twitter \
            --bluesky \
            --mastodon \
            --file social-post.txt
        env:
          TWITTER_API_CONSUMER_KEY: ${{ secrets.TWITTER_API_CONSUMER_KEY }}
          TWITTER_API_CONSUMER_SECRET: ${{ secrets.TWITTER_API_CONSUMER_SECRET }}
          TWITTER_ACCESS_TOKEN_KEY: ${{ secrets.TWITTER_ACCESS_TOKEN_KEY }}
          TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
          BLUESKY_HOST: ${{ secrets.BLUESKY_HOST }}
          BLUESKY_IDENTIFIER: ${{ secrets.BLUESKY_IDENTIFIER }}
          BLUESKY_PASSWORD: ${{ secrets.BLUESKY_PASSWORD }}
          MASTODON_ACCESS_TOKEN: ${{ secrets.MASTODON_ACCESS_TOKEN }}
          MASTODON_HOST: ${{ secrets.MASTODON_HOST }}
